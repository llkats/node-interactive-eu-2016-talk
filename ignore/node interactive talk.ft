# node interactive talk

Node's Cool at NodeSchool: A Chapter in the Making

To date, there are 167 chapters of NodeSchool all over the globe. The basic framework and resources for running a chapter are a URL away, for anyone to use. 

All it takes to run your own chapter is effort, commitment, and dedication to cultivating a community of students and mentors centered around learning. And yet, NodeSchool as a global organization has potential to grow to support even more beginners worldwide. A co-organizer of the San Francisco chapter NodeSchool shares lessons learned and her perspective on the future of NodeSchool.

How does a chapter get started? What pedagogical gaps can NodeSchool fill? In what ways can NodeSchool improve, and how can we work together to improve it?

## information to give
### how nodeschool got started
- workshopper format started with substack writing `stream-adventure` in 2013
- the primary format of NodeConf 2014 was centered around workshoppers for each session that attendees would work through and mentors would help with -- v nodeschool-like
### what it was like to start the chapter
- the chapter started when someone with no node experience made an issue, which was really cool.
- https://github.com/nodeschool/organizers/issues/92
- organization started to happen somewhat organically. Max Ogden pinged some people he knew in the area; I was one of them, and happy to jump on board.
- The on-boarding docs were helpful. We created a site and a twitter account and started getting the word out there.
- First event was at New Relic, we had a great crowd, and it was overall a success.
- Initially, we moved from venue to venue every month. When Reza started working at Mozilla, we started getting sponsored there every month.
### how the chapter is sustained
- through community interaction
- pool of mentors
- offering other lessons; focused sessions, teaming up with nodebots, etc.
### how in-person events help students
- it's as much a space to network and build relationships as it is a place to learn how to code, to meet other people at your level, or learn how to help others and become a mentor.
### how nodeschool is different
- in traditional learning, you have the centralized source of truth, it's like top down
- the code academies, online learning places, meetups, they give more outreach, give the content to more people. can be more interactive, connect people on forums or to teachers virtually
- nodeschool is distributed and decentralized. content is there and individuals can do the lessons themselves. but then communities can take the info, organize events around the content, and do the teaching themselves.

## problems to pose
- not much of a global community feeling
- don't feel like there's an overarching goal or direction
	- on the one hand, this lets people mold it into what fits the needs of their community
	- on the other, it can feel amorphous for new chapters to start or continue; there's a lack of direction for improvement; difficult to understand the needs of communities when there isn't a framework for communication
- workshopper quality has languished
	- workshopper issues
		- triage bugs
		- help with problems, questions about learning vs questions about the workshopper itself
		- https://github.com/substack/stream-adventure/issues/182
	- how can we make the issues themselves self-sustaining?
		- get students to file fixes
		- try to move discussion of concepts to a different place?
		- triage issues to the point that people can do small fixes and put them down so that others can pick them up again
	- how do we get more mentors organized?
		- gitter rooms aren't necessarily well-known about or well-used
		- i'd like a slack channel tbh...
		- chapter organizers could be point people with organizing mentors to contribute. if we could organize amongst active chapters, that might help get some momentum going
- how to grow quality mentors
- make workshoppers more accessible
	- have to set up an editor AND terminal, be comfortable with the disconnect between files and running a program
	- cs50 ide, jlord's awesome electron version of git-it
- have a better way of people to get help that the github issues
	- whew the discussions repo has 227 open issues...
		- great README though
		- does it matter that it has so many issues?
		- what does a 

### example of the repo in action
https://github.com/nodeschool/organizers/issues/364 - creating a new chapter

## Reza's thoughts
> nodeschool to me is just what we're doing... i don't really know what the major status of nodeschool is
> bums you out when people don't show up

## incorporate survey results

## moving forwards
recognizing that people have busy lives, what can we do as an organization that would make it easier for people to be able to pick up a few things to do and drop them back off for others to keep improving upon? what triage/organization could we do?

## give a community a framework
Give people a framework and they'll go out and teach the world and I think that's a pretty amazing thing about the JavaScript community. We have to continue to think of ways to maintain and grow the utility of NodeSchool, but it is a great start and I feel lucky to be a part of it.

# NodeUp #55 podcast - December 1st, 2013
- nodeschool
	- the goal is different because they wanted people to start events on their own
		- substack wrote the first workshop and rod vagg generalized and maintained the workshopper code
		> "grow the node community and teach people some fundamental skills" -- Max
- nodeconf - mikeal asked everyone to run in-person workshops 
	- substack made the `stream-adventure` workshop and rod made `learnyounode` after that, as a way of making something interactive and hands-on for CampJS
	- `levelmeup` for leveldb was made for NodeConf EU that happened in a castle, nodeconf eu 2013
- so after they had these modules, they were wondering how to take the concept further. max was talking to brian brennan, and max came up with the "nodeschool" name, and brian bought the domain, and substack did the initial domain and frontend
	- at first it was like, oh this is fun to do at conferences and then they were expanding it to meetups, but finally realized that it could be a standalone sort of event
	- they made a github org and a discussions repo
	- started holding events!
- supporting a variety of skill levels and toolset familiarity, had these difficulties from the beginning
- Mikeal said that he wanted NodeSchool workshoppers to be able to teach non-programmers to be able to teach programming
	- not just teaching programmers how to program

# Started from the Bottom, Jason Rhodes, Cascadia 2014
- nodeschool is community
- different than traditional meetup format
	1. finding speakers for meetups is really hard, the bottleneck for a monthly meetup
	2. once you find speakers, then you have to find the audience. all beginner talks will bore advanced users, and vice versa
	3. lecture format can have some deficiencies; delivers information but doesn't build community
		- the community-building happens at the bar after, which doesn't work for people who don't have time or don't want to go to a bar, excluding them
- nodeschool is different
	1. mentors are way easier to find than speakers
	2. learners and mentors have things to do, symbiotic relationship where they work together
	3. interaction happens organically

# the energy that you need to start a thing is different than the energy you need to maintain is different than the energy you need to grow the thing
- listening to the nodeup podcast, Rod noted that making the workshoppers was a way to create a learning experience that you still have something afterwards too, you have content that lives on after the actual teaching experience
	- at the time, in 2013, there weren't as many workshoppers around. there were 4 workshoppers at the time. the investment of creating modules was high, but then they existed
		- initial OS contributions were tiny correction PRs for fixing minor bugs
		- even then, there were difficulties with cross-platform bugs
	- if you put in the energy to make a workshop, workshoppers were a great way to have a reusable interactive module
	- now we have a whole bunch, including core topics and specializations/advanced topics
		- quality has not kept up through the years though. how old are these now, three years? some of the repos have dozens of PRs, hundreds of issues. some of them are in intense need of updating
		- how could we measure efficacy or quality of workshops so we know what to work on?
- in 2013, they wanted to see more workshops being written. now we have tons! but what is the quality of them?

# responsibility
- how do we, as laypeople, decide what's best/most important/fundamental for people to learn? how do we package it in a way that is successful and accessible? 




^ workshopper issues
	- triage bugs
	- help with problems, questions about learning vs questions about the workshopper itself
	- https://github.com/substack/stream-adventure/issues/182
- how can we make the issues themselves self-sustaining?
	- get students to file fixes
	- try to move discussion of concepts to a different place?
	- triage issues to the point that people can do small fixes and put them down so that others can pick them up again
- how do we get more mentors organized?
	- gitter rooms aren't necessarily well-known about or well-used
	- i'd like a slack channel tbh...
	- chapter organizers could be point people with organizing mentors to contribute. if we could organize amongst active chapters, that might help get some momentum going
- anyone can make workshoppers for things they're interested in, but how do we identify what might be missing in the "node curriculum" as it were for people? how do we get a workshopper written for that?



^ listening to the nodeup podcast, Rod noted that making the workshoppers was a way to create a learning experience that you still have something afterwards too, you have content that lives on after the actual teaching experience
	- at the time, in 2013, there weren't as many workshoppers around. there were 4 workshoppers at the time. the investment of creating modules was high, but then they existed
		- initial OS contributions were tiny correction PRs for fixing minor bugs
		- even then, there were difficulties with cross-platform bugs
	- if you put in the energy to make a workshop, workshoppers were a great way to have a reusable interactive module
	- now we have a whole bunch, including core topics and specializations/advanced topics
		- quality has not kept up through the years though. how old are these now, three years? some of the repos have dozens of PRs, hundreds of issues. some of them are in intense need of updating
		- how could we measure efficacy or quality of workshops so we know what to work on?
- in 2013, they wanted to see more workshops being written. now we have tons! but what is the quality of them?


^ incorporate survey results
* We recently surveyed NodeSchool SF attendees, and while I haven't gotten a representative sample yet, there have already been some interesting suggestions.
* One idea is to have a holistic workshopper, like a project-based "you learned these skills, now apply them". And I could see how an attendee might walk away from NodeSchool feeling like, all right they learned what callbacks are, but how does that fit into the bigger picture of programming? what do they work on next?



---

## how nodeschool is different
^
- nodeschool is a very different animal than normal tech meetups or learning. in traditional learning, you have the centralized source of truth, it's like top down.
- because nodeschool is distributed and decentralized, individuals can do lessons themselves, but more importantly, communities can take the info, organize events around the content, and do the teaching themselves.